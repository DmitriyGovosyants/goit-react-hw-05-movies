{"version":3,"file":"static/js/134.8917372c.chunk.js","mappings":"yOAqDA,UAhDe,WACb,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WACJF,GACFR,EAAUQ,KAEX,CAACA,KAEJE,EAAAA,EAAAA,YAAU,WACR,GAAe,KAAXX,EAAJ,CAIA,IAAMY,EAAK,mCAAG,gHAIAC,EAAAA,EAAAA,IAAkBb,GAJlB,gBAGAc,EAHA,EAGRC,KAAQD,QAGVX,EAASW,GANC,gDAQVT,EAAS,KAAEW,SARD,yDAAH,qDAWXJ,OACC,CAACZ,IAOJ,OACE,iCACE,SAAC,KAAD,CAAYiB,SAPC,SAAAC,GACfjB,EAAUiB,GACVV,EAAgB,CAAEC,MAAOS,OAMtBd,IAAS,uBAAIA,IACbF,EAAMiB,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACnB,OAAO,SAAC,KAAD,CAAoBA,GAAIA,EAAID,MAAOA,GAAnBC,W,0MC7CzBC,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAa,mCAAG,8FACdD,IAAAA,IAAA,qCAAwCD,IAD1B,mFAAH,qDAIbG,EAAiB,mCAAG,WAAOJ,GAAP,iFAClBE,IAAAA,IAAA,gBAAmBF,EAAnB,oBAAiCC,IADf,mFAAH,sDAIjBI,EAAiB,mCAAG,WAAOL,GAAP,iFAClBE,IAAAA,IAAA,gBAAmBF,EAAnB,4BAAyCC,IADvB,mFAAH,sDAIjBK,EAAiB,mCAAG,WAAON,GAAP,iFAClBE,IAAAA,IAAA,gBAAmBF,EAAnB,4BAAyCC,IADvB,mFAAH,sDAIjBT,EAAiB,mCAAG,WAAOe,GAAP,iFAClBL,IAAAA,IAAA,+BAAkCD,EAAlC,kBAAmDM,IADjC,mFAAH","sources":["pages/Movies.jsx","services/filmsApi.js"],"sourcesContent":["import { useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { SearchForm, MovieLink } from 'components';\nimport { fetchMoviesByName } from 'services/filmsApi';\n\nconst Movies = () => {\n  const [search, setSearch] = useState('');\n  const [films, setFilms] = useState([]);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query) {\n      setSearch(query);\n    }\n  }, [query]);\n\n  useEffect(() => {\n    if (search === '') {\n      return;\n    }\n\n    const fetch = async () => {\n      try {\n        const {\n          data: { results },\n        } = await fetchMoviesByName(search);\n\n        setFilms(results);\n      } catch (e) {\n        setError(e.message);\n      }\n    };\n    fetch();\n  }, [search]);\n\n  const onSearch = value => {\n    setSearch(value);\n    setSearchParams({ query: value });\n  };\n\n  return (\n    <>\n      <SearchForm onSearch={onSearch} />\n      {error && <p>{error}</p>}\n      {films.map(({ title, id }) => {\n        return <MovieLink key={id} id={id} title={title} />;\n      })}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'bfe20768c956c05046c7d088e4b361cd';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrending = async () => {\n  return await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n}\n\nexport const fetchMovieDetails = async (id) => {\n  return await axios.get(`movie/${id}?api_key=${API_KEY}`);\n}\n\nexport const fetchMovieCredits = async (id) => {\n  return await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n}\n\nexport const fetchMovieReviews = async (id) => {\n  return await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n}\n\nexport const fetchMoviesByName = async (name) => {\n  return await axios.get(`search/movie?api_key=${API_KEY}&query=${name}`);\n}"],"names":["useState","search","setSearch","films","setFilms","error","setError","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetch","fetchMoviesByName","results","data","message","onSearch","value","map","title","id","API_KEY","axios","fetchTrending","fetchMovieDetails","fetchMovieCredits","fetchMovieReviews","name"],"sourceRoot":""}